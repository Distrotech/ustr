Section: Creating read-only Ustr functions
Function: USTR()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Pointer to Ustr data
 Type[1]: void *

 Explanation:

  This macro function is normally used with the empty string "".

 Note:

  There is basically just a simple cast behind the macro.


Function: USTRP()
 Returns: Ustrp string
 Type: struct Ustrp *

 Parameter[1]: Pointer to Ustr data
 Type[1]: void *

 Explanation:

  This macro function is normally used with the empty string "".

 Note:

  There is basically just a simple cast behind the macro.


Function: USTR1()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Data for Ustr string
 Type[2]: const char[]

 Explanation:

  This macro function simplifies the creation of read-only Ustr string's. And
 is normally used like...

  USTR1(\x4, "abcd")

 ...it is worth pointing out that running with debugging turned on
 (USTR_CONF_USE_ASSERT) will complain if the length isn't encoded correctly, as
 in...

  USTR1(\x3, "abcd")

 ...here ustr_assert_valid() will fail, which is called before most functions do
 anything in debugging mode. Note also that extra debugging
 (USTR_CONF_USE_EOS_MARK) will still catch cases like...

  USTR1(\x3, "abc\0d")

 ...at least using debugging is esp. important if you are putting UTF-8
 characters into the strings.

 Note:

  Having ustr_ro() return true means that the Ustr cannot be written to without
 be reallocated into allocation space ... not that ustr_add() etc. will fail.


Function: USTR2()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded 2nd byte of number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Encoded 1st byte of number of the length of Ustr string
 Type[2]: symbol

 Parameter[3]: Data for Ustr string
 Type[3]: const char[]

 Explanation:

  This function works in the same way as USTR1() but takes two length bytes, so
 the read-only string can be upto 65,535 (2**16 - 1) bytes in length.


Function: USTR4()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded 4th byte of number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Encoded 3rd byte of number of the length of Ustr string
 Type[2]: symbol

 Parameter[3]: Encoded 2nd byte of number of the length of Ustr string
 Type[3]: symbol

 Parameter[4]: Encoded 1st byte of number of the length of Ustr string
 Type[4]: symbol

 Parameter[5]: Data for Ustr string
 Type[5]: const char[]

 Explanation:

  This function works in the same way as USTR1() but takes four length bytes, so
 the read-only string can be upto 2**32 - 1 bytes in length.


Function: USTRP1()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Data for Ustr string
 Type[2]: const char[]

 Explanation:

  This function works like USTR1(), but returns a Ustrp instead.


Function: USTRP2()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded 2nd byte of number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Encoded 1st byte of number of the length of Ustr string
 Type[2]: symbol

 Parameter[3]: Data for Ustr string
 Type[3]: const char[]

 Explanation:

  This function works like USTR4(), but returns a Ustrp instead.


Function: USTRP4()
 Returns: Ustrp string
 Type: struct Ustrp *

 Parameter[1]: Encoded 4th byte of number of the length of Ustrp string
 Type[1]: symbol

 Parameter[2]: Encoded 3rd byte of number of the length of Ustrp string
 Type[2]: symbol

 Parameter[3]: Encoded 2nd byte of number of the length of Ustrp string
 Type[3]: symbol

 Parameter[4]: Encoded 1st byte of number of the length of Ustrp string
 Type[4]: symbol

 Parameter[5]: Data for Ustr string
 Type[5]: const char[]

 Explanation:

  This function works like USTR2(), but returns a Ustrp instead.


Section: Creating fixed Ustr functions
Function: USTR_SIZE_FIXED()
 Returns: Size of area of memory
 Type: size_t

 Parameter[1]: Size of area of memory
 Type[1]: size_t

 Explanation:

  This macro function is replaced by a static conversion from the max length
 desired (Parameter[1]) to the storage size needed. In other words it works out
 what ustr_size_overhead() will be, and adds that value.

 Note:

  This is useful is you want a small fixed size allocation, as you can declare
 it like so:

  char buf[USTR_SIZE_FIXED(4)];

 ...to give you exactly 4 bytes as a maximum, this is esp. useful if you want
 a limited (ustr_limited() == USTR_TRUE) Ustr string.


Function: ustr_init_fixed()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Pointer to area of memory to use as a Ustr string
 Type[1]: void *

 Parameter[2]: Size of area of memory
 Type[2]: size_t

 Parameter[3]: Whether the fixed size Ustr should be limited
 Type[3]: int

 Parameter[4]: The initial length of the Ustr
 Type[4]: size_t

 Explanation:

  This creates a new Ustr string, which is "fixed". This means the Ustr storage
 is managed outside of the ustr_* API, it is often used for stack allocated
 strings.
  As you add data to the Ustr past the size allowed via. the fixed storge the
 Ustr will automatically be converted into an allocated Ustr. So if this is
 possible you should always call ustr_free(), as this does nothing if given a
 fixed size Ustr.

 Note:

  For simplicity you probably want to use USTR_SC_INIT_AUTO() when possible.


Function: USTR_SC_INIT_AUTO()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Area of memory to use as a Ustr string
 Type[1]: char[]

 Parameter[2]: Whether the fixed size Ustr should be limited
 Type[2]: int

 Parameter[3]: The initial length of the Ustr
 Type[3]: size_t

 Explanation:

  This calls ustr_init_fixed() with sizeof() the area of memory (Parameter[1])
 as the second argument.

 Note:

  This does mean that the first argument must be the correct size, as far as
 sizeof() is concerned, as in...

 char buf_sz[1024];
 Ustr *s1 = USTR_SC_INIT_AUTO(buf_sz, USTR_FALSE, 0);

 ...so passing pointers to memory from malloc() will probably just return NULL.


Section: Creating allocated Ustr functions
Function: ustr_init_alloc()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Pointer to area of memory to use as a Ustr string
 Type[1]: void *

 Parameter[2]: Size of area of memory
 Type[2]: size_t

 Parameter[3]: Whether Ustr should store the size
 Type[3]: size_t

 Parameter[4]: Number of bytes to use for references
 Type[4]: size_t

 Parameter[5]: Whether the Ustr should use exact allocations
 Type[5]: int

 Parameter[6]: Whether the Ustr should have the "enomem" flag set
 Type[6]: int

 Parameter[7]: The initial length of the Ustr
 Type[7]: size_t

 Explanation:

  This creates a new Ustr string, you should have allocated the data via. 
 USTR_CONF_MALLOC() or bad things will happen if the Ustr string is ever free'd
 or reallocated.


Function: ustr_dupx_empty()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Size of allocated storage
 Type[1]: size_t

 Parameter[2]: Number of bytes to use for reference count
 Type[2]: size_t

 Parameter[3]: Exact memory allocation flag
 Type[3]: int

 Parameter[4]: ENOMEM, memory error flag
 Type[4]: int

 Explanation:

  This function creates an empty Ustr, owned by you, that is allocated
 from system memory, or it returns NULL.
  The size is the desired allocation size for the entire Ustr, including
 overhead for metadata. This value will be rounded up, if it's too small, so
 passing 1 as the size means you want a stored size but to allocate the smallest
 amount of memory possible.
  The exact memory allocation flag says if the Ustr should round allocations up
 to the nearest half power of two or should be no more than needed.
  The ENOMEM memory error flag sets the iniital state of the user visible flag
 for memory allocation errors. Eg. ustr_enomem(), ustr_setf_enomem_clr() and
 ustr_setf_enomem_err()

 Note:

  The reference byte count can only be one of the following values: 0, 1, 2 or
 4, or 8 (on environments with a 64bit size_t).
  It can be useful to ensure that the Ustr is in system memory, so that you can
 add things to it and check for errors with ustr_enomem().
  If you chose to store the allocated size in the Ustr then the number of bytes
 allocated for the reference count will be a minimum of 2.


Function: ustr_dup_empty()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Nothing
 Type[1]: void

 Explanation:

  This function is the same as calling ustr_dupx_empty() with the current set
 of default options.


Function: ustr_dupx_undef()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Size of allocated storage
 Type[1]: size_t

 Parameter[2]: Number of bytes to use for reference count
 Type[2]: size_t

 Parameter[3]: Exact memory allocations
 Type[3]: int

 Parameter[4]: ENOMEM, memory error flag
 Type[4]: int

 Parameter[5]: Length of new undefined data
 Type[5]: size_t

 Explanation:

  This function works like you called ustr_dupx_empty() and then
 ustr_add_undef().


Function: ustr_dup_undef()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Length of new undefined data
 Type[1]: size_t

 Explanation:

  This function is the same as calling ustr_dupx_undef() with the current set
 of default options.


Section: Adding data to a Ustr
Function: ustr_add_undef()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Length of new undefined data
 Type[2]: size_t

 Explanation:

  The Ustr string is expanded (possibly reallocated) so that it can contain
 length (Parameter[2]) extra data, if the length is not zero the Ustr will
 be writable. Or it'll return USTR_FALSE (zero) on failure.


Function: ustr_add_buf()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Pointer to data
 Type[2]: const void *

 Parameter[3]: Length of data
 Type[3]: size_t

 Explanation:

  This function works as if you had called ustr_add_undef() and then copied the
 data into the new undefined spacee.


Function: ustr_add_cstr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Pointer to C-style string
 Type[2]: const char *

 Explanation:

  This function works as if you had called ustr_add_buf() and passed strlen() as
 the length.


Function: ustr_add()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: A pointer to a constant Ustr string
 Type[2]: const struct Ustr *

 Explanation:

  This function mostly works as if you had called ustr_add_buf() with the
 ustr_cstr() and ustr_len() values of the Ustr string to be added.

 Note:

  If the Ustr string is zero length and isn't writable this function may just
 add a reference, this is fine for Ustr strings that are "constant" because if
 the Ustr is read-only then the memory will not be written to.


Function: ustr_add_subustr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: A pointer to a constant Ustr string
 Type[2]: const struct Ustr *

 Parameter[3]: Position in the Ustr
 Type[3]: size_t

 Parameter[4]: Length to add from the Ustr
 Type[4]: size_t

 Explanation:

  This function mostly works as if you had called ustr_add_buf() with the
 ustr_cstr() + position - 1 and length values of the Ustr string to be added.

 Note:

  If the position is 1 and the length is the length of the Ustr string then it
 just calls ustrr_add().


Function: ustr_add_rep_chr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Byte value of data
 Type[2]: char

 Parameter[3]: Length of bytes as data
 Type[3]: size_t

 Explanation:

  This function works as if you had called ustr_add_undef() and then copied the
 byte value to each position.


Section: Deleting data from a Ustr
Function: ustr_del()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Length to delete from the Ustr
 Type[2]: size_t

 Explanation:

  This function deletes data from the end of Ustr, possibly re-sizing the Ustr
 at the same time.

 Note:

  The Ustr is never re-sized when the size is stored explicitly, so the pointer
 never changes.


Function: ustr_del_subustr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Position in the Ustr
 Type[2]: size_t

 Parameter[3]: Length to delete from the Ustr
 Type[3]:  size_t

 Explanation:

  This function works like ustr_del() but can delete an arbitrary section of the
 Ustr.


Section: Setting a Ustr to some data
Function: ustr_set_undef()
 Returns: Success or failure 
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  size_t
 Type[2]:  size_t

 Explanation:

  This function works as if you had called ustr_del() for the entire string and
 the ustr_add_undef().


Function: ustr_set_empty()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Explanation:

  This function works as if you had called ustr_del() for the entire string,
 however the string will be allocated if this completes.


Function: ustr_set_buf()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  const void *
 Type[2]:  const void *

 Parameter[3]:  size_t
 Type[3]:  size_t

 Explanation:

  This function works as if you had called ustr_del() for the entire string and
 the ustr_add_buf().


Function: ustr_set_cstr()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Explanation:

  This function works as if you had called ustr_del() for the entire string and
 the ustr_add_cstr().


Function: ustr_set()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: A pointer to a constant Ustr string
 Type[2]: const struct Ustr *

 Explanation:

  This function works as if you had called ustr_del() for the entire string and
 the ustr_add().


Function: ustr_set_subustr()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: A pointer to a constant Ustr string
 Type[2]: const struct Ustr *

 Parameter[3]: Position in the Ustr
 Type[3]: size_t

 Parameter[4]: Length to set from the Ustr
 Type[4]: size_t

 Explanation:

  This function works as if you had called ustr_del() for the entire string and
 the ustr_add_subustr().


Function: ustr_set_rep_chr()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Byte value of data
 Type[2]: char

 Parameter[3]: Length of bytes as data
 Type[3]: size_t

 Explanation:

  This function works as if you had called ustr_del() for the entire string and
 the ustr_add_rep_chr().


Section: Resizing a sized Ustr
Function: ustr_realloc()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Size of allocation
 Type[2]: size_t

 Explanation:

  This function is re-sizes the Ustr to the specified size (Parameter[2]).
  This is mostly used to shrink a sized Ustr that is now significantly
 smaller than it once was. Although this function can also grow a Ustr.

 Note:

  To have a size that isn't implied from the length the Ustr must store a size
 value as well as a length (ustr_sized() must return USTR_TRUE).


Section: Adding formatted data to a Ustr
Function: ustr_add_vfmt_lim()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  const char *
 Type[3]:  const char *

 Parameter[4]:  va_list
 Type[4]:  va_list

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_vfmt()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Parameter[3]:  va_list
 Type[3]:  va_list

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_fmt()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Parameter[3]:  ...
 Type[3]:  ...

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_fmt_lim()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]: const char *
 Type[3]: const char *

 Parameter[4]:  ...
 Type[4]:  ...

 Explanation:

  This function is NOT DOCUMENTED YET!


Section: Adding binary data to a Ustr
Function: ustr_add_b_uint16()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Binary value to add to the Ustr
 Type[2]: uint_least16_t

 Explanation:

  This function adds a binary representation of a value (Parameter[2]) to the
 Ustr (Parameter[1]).


Function: ustr_add_b_uint32()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Binary value to add to the Ustr
 Type[2]: uint_least32_t

 Explanation:

  This function adds a binary representation of a value (Parameter[2]) to the
 Ustr (Parameter[1]).


Function: ustr_add_b_uint64()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Binary value to add to the Ustr
 Type[2]: uint_least64_t

 Explanation:

  This function adds a binary representation of a value (Parameter[2]) to the
 Ustr (Parameter[1]).


Section: Accessing the "variables" of a Ustr
Function: ustr_len()
 Returns: The length of the Ustr
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function returns the length of the data within the Ustr, much like
 strlen() but without getting the value wrong in the case of extra NIL bytes.


Function: ustr_cstr()
 Returns: Read-only pointer to the start of data in the Ustr
 Type: const char *

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function returns a read-only pointer to the start of the data of the
 Ustr string. Due to there always being a terminating NIL byte in a Ustr, this
 is also a valid C-style string.


Function: ustr_wstr()
 Returns: Writable pointer to the start of data in the Ustr, or NULL
 Type: char *

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: struct Ustr *

 Explanation:

  This function returns a writable pointer to the start of the data of the
 Ustr string. Due to there always being a terminating NIL byte in a Ustr, this
 is also a valid C-style string.
  If the ustr is read-only (ustr_ro() == USTR_TRUE) then this function will
 return NULL.

 Note:

  Unless the string is owned (ustr_owner() == USTR_TRUE) it can be a very bad
 idea to use this to change data, as then all references will be updated. See
 ustr_sc_wstr().


Function: ustr_alloc()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr is currently in allocated storage.


Function: ustr_exact()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr is doing exact allocations, so as the Ustr
 grows it will only have storage allocated exactly as required and not in half
 powers of two.

 Note:

  This will always be USTR_FALSE for read-only Ustr strings
 (ustr_ro() == USTR_TRUE), even though the default may be to used exact sized
 allocations when  adding data to them etc.


Function: ustr_sized()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr stores an explicit allocation size, if not
 the size is implied as the next highest half power of two.


Function: ustr_ro()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr is current in read-only storage.
  Read-only storage is not writable but can be referenced via. ustr_dup() an
 infinite amount of times.


Function: ustr_fixed()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr is current in fixed size storage.
  Fixed size storage is writable but cannot be referenced.

 Note:

  Fixed size storage always explicitly stores the size of the storage.


Function: ustr_enomem()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function just returns the value of the user settable flag in the Ustr. It
 can be set via. ustr_setf_enomem_err() and cleared by ustr_setf_enomem_clr().
  This function is automatically set to on whever a memory allocation failure
 happens for a Ustr.

 Note:

  If a Ustr is referenced multiple times, ustr_setf_enomem_err() will fail.
  This always fails for Ustr's in read-only storage.


Function: ustr_shared()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr is in the "shared" mode. It can be set via.
 ustr_setf_shared() and cleared by ustr_setf_owner() on allocated Ustr's.
  Shared mode means that a Ustr can be referenced and unreferenced an infinite
 number of times.

 Note:

  This always succeeds for Ustr's in read-only storage.
  This always fails for Ustr's in fixed size storage.


Function: ustr_limited()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if the Ustr is currently in fixed size storage and cannot
 move to allocated storage.

 Note:

  This always fails for Ustr's in allocated storage.
  This always fails for Ustr's in read-only storage.


Function: ustr_owner()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function says if their is only a single reference to the Ustr string.

 Note:

  This always fails for Ustr's in read-only storage.
  This always succeeds for Ustr's in fixed size storage.


Function: ustr_size()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function calculates the maximum amount of data that could be stored (Ie.
 the max ustr_len()) without having to re-size the Ustr string.


Function: ustr_size_alloc()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function returns the size of the storage for the Ustr.


Function: ustr_size_overhead()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function returns the difference between the size of the storage and the
 maximum amount of data that could be stored without having to re-size the Ustr
 string.


Section: Setting the "flags" of a Ustr
Function: ustr_setf_enomem_err()
 Returns: Success or failure
 Type: int 

 Parameter[1]: A pointer to a Ustr string
 Type[1]: struct Ustr *

 Explanation:

  This function sets the enomem flag, which can be observed via. the
 ustr_enomem() function.
  The implication of setting this flag is that a memory error has occured in a
 previous function call on this Ustr.

 Note:

  This function fails if ustr_owner() fails for the Ustr.


Function: ustr_setf_enomem_clr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: A pointer to a Ustr string
 Type[1]: struct Ustr *

 Explanation:

  This function clears the enomem flag, which can be observed via. the
 ustr_enomem() function.
  The implication of this flag being set is that a memory error has occured in
 a previous function call on this Ustr, so on clearing the flag you should
 know you have brought the Ustr back to a known state.

 Note:

  This function fails if ustr_owner() fails for the Ustr.


Function: ustr_setf_share()
 Returns: Success or failure
 Type: int 

 Parameter[1]: A pointer to a Ustr string
 Type[1]: struct Ustr *

 Explanation:

  This function sets the shared mode, which can be observed via. the
 ustr_shared() function.
  This is used on a Ustr so that it can have more references than it is able
 to hold in it's reference count. After this call the Ustr can be referenced and
 unreferenced an infinite number of times.

 Note:

  After this call the Ustr will never be deleted until ustr_setf_owner() is
 called.
  This function fails if ustr_alloc() fails for the Ustr.


Function: ustr_setf_owner()
 Returns: Success or failure
 Type: int 

 Parameter[1]: A pointer to a Ustr string
 Type[1]: struct Ustr *

 Explanation:

  This function removes the shared mode, which can be observed via. the
 ustr_shared() function.
  This is used so that a Ustr in shared mode can be free'd.

 Note:

  This function fails if ustr_alloc() fails for the Ustr.


Section: Comparing data in a Ustr
Function: ustr_cmp_buf()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_subustr()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Parameter[3]: 
 Type[3]: size_t

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_cstr()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_fast_buf()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr*

 Parameter[2]: 
 Type[2]: const void*

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_fast()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_fast_subustr()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Parameter[3]: 
 Type[3]: size_t

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_fast_cstr()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_buf()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_subustr()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Parameter[3]: 
 Type[3]: size_t

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_cstr()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_buf_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_subustr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Parameter[3]: 
 Type[3]: size_t

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_cstr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_buf_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_subustr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Parameter[3]: 
 Type[3]: size_t

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_cstr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_prefix_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_prefix_buf_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_prefix_cstr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_prefix_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_prefix_buf_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_prefix_cstr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_suffix_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_suffix_buf_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_suffix_cstr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_suffix_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_suffix_buf_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const void *

 Parameter[3]: 
 Type[3]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cmp_case_suffix_cstr_eq()
 Returns: 
 Type: int 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Section: Searching for data in a Ustr
Function: ustr_srch_chr_fwd()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: Byte data to search for
 Type[3]: char

 Explanation:

  This function searches for the data (Parameter[3]) in the Ustr, skipping an
 offset (Parameter[2]) number of bytes.


Function: ustr_srch_chr_rev()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]:  size_t

 Parameter[3]: Byte data to search for
 Type[3]: char

 Explanation:

  This function works like ustr_srch_chr_fwd() but it searches from the end of
 the string to the beginning.


Function: ustr_srch_buf_fwd()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to data to search for
 Type[3]: const void *

 Parameter[4]: Length of the data to search for
 Type[4]: size_t

 Explanation:

  This function searches for the data (Parameter[3]) of length (Parameter[4])
 in the Ustr, skipping an offset (Parameter[2]) number of bytes.


Function: ustr_srch_buf_rev()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to data to search for
 Type[3]: const void *

 Parameter[4]: Length of the data to search for
 Type[4]: size_t

 Explanation:

  This function works like ustr_srch_buf_fwd() but it searches from the end of
 the string to the beginning.


Function: ustr_srch_fwd()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to a constant Ustr string, to search for
 Type[3]: const struct Ustr *

 Explanation:

  This function works like ustr_srch_buf_fwd() but it gets the data pointer by
 calling ustr_cstr() and the length by calling ustr_len() on the passed
 Ustr (Parameter[3]).


Function: ustr_srch_rev()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to a constant Ustr string
 Type[3]: const struct Ustr *

 Explanation:

  This function works like ustr_srch_fwd() but it searches from the end of
 the string to the beginning.


Function: ustr_srch_cstr_fwd()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to C-style string data, to search for
 Type[3]: const char *

 Explanation:

  This function works like ustr_srch_buf_fwd() but it gets the length by
 calling strlen() on the passed data (Parameter[3]).


Function: ustr_srch_cstr_rev()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to C-style string data, to search for
 Type[3]: const char *

 Explanation:

  This function works like ustr_srch_cstr_fwd() but it searches from the end of
 the string to the beginning.


Function: ustr_srch_subustr_fwd()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]: size_t

 Parameter[3]: A pointer to a constant Ustr string
 Type[3]: const struct Ustr *

 Parameter[4]: Position in the Ustr
 Type[4]: size_t

 Parameter[5]: Length of data to search, from the Ustr
 Type[5]: size_t

 Explanation:

  This function works like ustr_srch_fwd() but it moves the data to start at
 the correct position and limits the length to the value specified.


Function: ustr_srch_subustr_rev()
 Returns: Position in the Ustr, or zero if not found
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start searching at
 Type[2]:  size_t

 Parameter[3]: A pointer to a constant Ustr string
 Type[3]: const struct Ustr *

 Parameter[4]: Position in the Ustr
 Type[4]: size_t

 Parameter[5]: Length of data to search, from the Ustr
 Type[5]: size_t

 Explanation:

  This function works like ustr_srch_rev() but it moves the data to start at
 the correct position and limits the length to the value specified.


Section: Span lengths of data in a Ustr

Function: ustr_spn_chr_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: char

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_chr_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: char

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_chrs_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_chrs_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_cstr_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_spn_cstr_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_chr_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: char

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_chr_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: char

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_chrs_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_chrs_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_cstr_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_cspn_cstr_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_spn_chrs_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_spn_chrs_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_spn_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_spn_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_spn_cstr_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_spn_cstr_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_cspn_chrs_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_cspn_chrs_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Parameter[4]: 
 Type[4]: size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_cspn_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_cspn_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_cspn_cstr_fwd()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_cspn_cstr_rev()
 Returns: 
 Type: size_t 

 Parameter[1]: 
 Type[1]: const struct Ustr *

 Parameter[2]: 
 Type[2]: size_t

 Parameter[3]: 
 Type[3]: const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Section: Doing IO from or to a Ustr
Function: ustr_io_get()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t *
 Type[4]:  size_t *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_getfile()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_getfilename()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_getline()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_put()
 Returns: int 
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Parameter[3]:  size_t
 Type[3]:  size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putline()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Parameter[3]:  size_t
 Type[3]:  size_t

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putfile()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putfileline()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putfilename()
 Returns: Success or failure
 Type: int 

 Parameter[1]: Pointer to a pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Parameter[3]:  const char *
 Type[3]:  const char *

 Explanation:

  This function is NOT DOCUMENTED YET!


Section: Dealing with UTF-8 in a Ustr
Function: ustr_utf8_valid()
 Returns: A boolean flag of either USTR_TRUE or USTR_FALSE
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function tries it's best to find out if the string is a valid utf-8
 string.


Function: ustr_utf8_len()
 Returns: The number of the utf-8 characters in the Ustr
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function counts the number of utf-8 characters inn the Ustr.

 Note:

  This function gives undefined answers on strings that aren't utf-8 valid.


Function: ustr_utf8_width()
 Returns: ssize_t 
 Type: ssize_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_chars2bytes()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t *
 Type[4]:  size_t *

 Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_bytes2chars()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t *
 Type[4]:  size_t *

 Explanation:

  This function is NOT DOCUMENTED YET!


Section: Parsing binary data from a Ustr
Function: ustr_parse_b_uint16()
 Returns: uint_least16_t 
 Type: uint_least16_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Explanation:

  This function parses a binary representation from a Ustr (Parameter[1]) 
 starting at the offset (Parameter[2]).


Function: ustr_parse_b_uint32()
 Returns: uint_least32_t 
 Type: uint_least32_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Explanation:

  This function parses a binary representation from a Ustr (Parameter[1]) 
 starting at the offset (Parameter[2]).


Function: ustr_parse_b_uint64()
 Returns: uint_least64_t 
 Type: uint_least64_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Explanation:

  This function parses a binary representation from a Ustr (Parameter[1]) 
 starting at the offset (Parameter[2]).


Section: Parsing ASCII integer numbers from a Ustr
Function: ustr_parse_uintmaxx()
 Returns: Parsed number, or zero on error
 Type: uintmax_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Absolute minimum value
 Type[4]: uintmax_t

 Parameter[5]: Absolute maximum value
 Type[5]: uintmax_t

 Parameter[6]: Thousands seperator
 Type[6]: const char *

 Parameter[7]: Return length of parsed number
 Type[7]: size_t *

 Parameter[8]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[8]: unsigned int *

 Explanation:

  This function parses an ASCII representation of a number from a
 Ustr (Parameter[1]) starting at the offset (Parameter[2]).

 Note:

  If stdint.h isn't available this function won't be available.


Function: ustr_parse_uintmax()
 Returns: Parsed number, or zero on error
 Type: uintmax_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_uintmaxx() with the minimum and maximum
 values taken as 0 and UINTMAX_MAX, and the thousands seperator as "_".

 Note:

  If stdint.h isn't available this function won't be available.


Function: ustr_parse_intmax()
 Returns: Parsed number, or zero on error
 Type: intmax_t 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_uintmaxx() with the minimum and maximum
 values taken as -INTMAX_MIN and INTMAX_MAX, and the thousands seperator as "_".

 Note:

  If stdint.h isn't available this function won't be available.


Function: ustr_parse_ulongx()
 Returns: Parsed number, or zero on error
 Type: unsigned long 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]:  size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]:  unsigned int

 Parameter[4]: Absolute minimum value
 Type[4]:  unsigned long

 Parameter[5]: Absolute maximum value
 Type[5]:  unsigned long

 Parameter[6]: Thousands seperator
 Type[6]: const char *

 Parameter[7]: Return length of parsed number
 Type[7]:  size_t *

 Parameter[8]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[8]: unsigned int *

 Explanation:

  This function works like ustr_parse_uintmaxx() but returns an unsigned long,
 it is always available even when stdint.h isn't.


Function: ustr_parse_ulong()
 Returns: Parsed number, or zero on error
 Type: unsigned long 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_ulongx() with the minimum and maximum
 values taken as 0 and ULONG_MAX, and the thousands seperator as "_".


Function: ustr_parse_long()
 Returns: Parsed number, or zero on error
 Type: long 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_ulongx() with the minimum and maximum
 values taken as -LONG_MIN and LONG_MAX, and the thousands seperator as "_".


Function: ustr_parse_uint()
 Returns: Parsed number, or zero on error
 Type: unsigned int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_ulongx() with the minimum and maximum
 values taken as 0 and UINT_MAX, and the thousands seperator as "_".


Function: ustr_parse_int()
 Returns: Parsed number, or zero on error
 Type: int 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_ulongx() with the minimum and maximum
 values taken as -INT_MIN and INT_MAX, and the thousands seperator as "_".


Function: ustr_parse_ushort()
 Returns: Parsed number, or zero on error
 Type: unsigned short 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_ulongx() with the minimum and maximum
 values taken as 0 and USHRT_MAX, and the thousands seperator as "_".


Function: ustr_parse_short()
 Returns: Parsed number, or zero on error
 Type: short 

 Parameter[1]: A pointer to a constant Ustr string
 Type[1]: const struct Ustr *

 Parameter[2]: Offset within string to start parsing at
 Type[2]: size_t

 Parameter[3]: Base (2-36) and flags, starting with USTR_FLAG_PARSE_NUM_
 Type[3]: unsigned int

 Parameter[4]: Return length of parsed number
 Type[4]: size_t *

 Parameter[5]: Return error code, starting with USTR_TYPE_PARSE_NUM_ERR_
 Type[5]: unsigned int *

 Explanation:

  This function works like ustr_parse_ulongx() with the minimum and maximum
 values taken as -SHRT_MIN and SHRT_MAX, and the thousands seperator as "_".


Section: Simple Ustr pool API
Function: ustr_pool_make_pool()
 Returns: Ustr pool object
 Type: struct Ustr_pool *

 Parameter[1]: Nothing
 Type[1]: void

 Explanation:

  This allocates a new pool.

Function: ustr_pool_make_subpool()
 Returns: struct Ustr_pool *
 Type: struct Ustr_pool *

 Parameter[1]: struct Ustr_pool *
 Type[1]: struct Ustr_pool *

 Explanation:

  This allocates a new pool as a child of the passed in pool (Parameter[1]),
 The pool can be freed and cleared independantly of the parent pool however
 free and clear operations on the parent pool are automatically applied to all
 child pools.


Function: ustr_pool_free()
 Returns: Nothing
 Type: void

 Parameter[1]: Ustr pool object
 Type[1]: struct Ustr_pool *

 Explanation:

  This deallocates a pool, and all sub-pools.

 Note:

  This also operates on all sub-pools.


Function: ustr_pool_clear()
 Returns: Nothing
 Type: void

 Parameter[1]: Ustr pool object
 Type[1]: struct Ustr_pool *

 Explanation:

  This allows all the data in the pool to be reused, it may also free some/all
 of the data in the pool, from the pool API.

 Note:

  This also operates on all sub-pools.

