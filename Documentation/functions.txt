Section: Creating read-only Ustr functions


Function: USTR()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Pointer to Ustr data
 Type[1]: void *

 Explanation:

  This macro function is normally used with the empty string "".

 Note:

  There is basically just a simple cast behind the macro.


Function: USTRP()
 Returns: Ustrp string
 Type: struct Ustrp *

 Parameter[1]: Pointer to Ustr data
 Type[1]: void *

 Explanation:

  This macro function is normally used with the empty string "".

 Note:

  There is basically just a simple cast behind the macro.


Function: USTR1()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Data for Ustr string
 Type[2]: const char[]

 Explanation:

  This macro function simplifies the creation of read-only Ustr string's. And
 is normally used like...

  USTR1(\x4, "abcd")

 ...it is worth pointing out that running with debugging turned on
 (USTR_CONF_USE_ASSERT) will complain if the length isn't encoded correctly, as
 in...

  USTR1(\x3, "abcd")

 ...here ustr_assert_valid() will fail, which is called before most functions do
 anything in debugging mode. Note also that extra debugging
 (USTR_CONF_USE_EOS_MARK) will still catch cases like...

  USTR1(\x3, "abc\0d")

 ...at least using debugging is esp. important if you are putting UTF-8
 characters into the strings.

 Note:

  Having ustr_ro() return true means that the Ustr cannot be written to without
 be reallocated into allocation space ... not that ustr_add() etc. will fail.


Function: USTR2()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded 2nd byte of number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Encoded 1st byte of number of the length of Ustr string
 Type[2]: symbol

 Parameter[3]: Data for Ustr string
 Type[3]: const char[]

 Explanation:

  This function works in the same way as USTR1() but takes two length bytes, so
 the read-only string can be upto 65,535 (2**16 - 1) bytes in length.


Function: USTR4()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded 4th byte of number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Encoded 3rd byte of number of the length of Ustr string
 Type[2]: symbol

 Parameter[3]: Encoded 2nd byte of number of the length of Ustr string
 Type[3]: symbol

 Parameter[4]: Encoded 1st byte of number of the length of Ustr string
 Type[4]: symbol

 Parameter[5]: Data for Ustr string
 Type[5]: const char[]

 Explanation:

  This function works in the same way as USTR1() but takes four length bytes, so
 the read-only string can be upto 2**32 - 1 bytes in length.


Function: USTRP1()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Data for Ustr string
 Type[2]: const char[]

 Explanation:

  This function works like USTR1(), but returns a Ustrp instead.


Function: USTRP2()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Encoded 2nd byte of number of the length of Ustr string
 Type[1]: symbol

 Parameter[2]: Encoded 1st byte of number of the length of Ustr string
 Type[2]: symbol

 Parameter[3]: Data for Ustr string
 Type[3]: const char[]

 Explanation:

  This function works like USTR4(), but returns a Ustrp instead.


Function: USTRP4()
 Returns: Ustrp string
 Type: struct Ustrp *

 Parameter[1]: Encoded 4th byte of number of the length of Ustrp string
 Type[1]: symbol

 Parameter[2]: Encoded 3rd byte of number of the length of Ustrp string
 Type[2]: symbol

 Parameter[3]: Encoded 2nd byte of number of the length of Ustrp string
 Type[3]: symbol

 Parameter[4]: Encoded 1st byte of number of the length of Ustrp string
 Type[4]: symbol

 Parameter[5]: Data for Ustr string
 Type[5]: const char[]

 Explanation:

  This function works like USTR2(), but returns a Ustrp instead.



Section: Creating fixed Ustr functions

Function: ustr_init_fixed()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Pointer to area of memory to use as a Ustr string
 Type[1]: void *

 Parameter[2]: Size of area of memory
 Type[2]: size_t

 Parameter[3]: Whether the fixed size Ustr should be limited
 Type[3]: int

 Parameter[4]: The initial length of the Ustr
 Type[4]: size_t

 Explanation:

  This creates a new Ustr string, which is "fixed". This means the Ustr storage
 is managed outside of the ustr_* API, it is often used for stack allocated
 strings.
  As you add data to the Ustr past the size allowed via. the fixed storge the
 Ustr will automatically be converted into an allocated Ustr. So if this is
 possible you should always call ustr_free(), as this does nothing if given a
 fixed size Ustr.

 Note:

  For simplicity you probably want to use USTR_SC_INIT_AUTO() when possible.


Function: USTR_SC_INIT_AUTO()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Area of memory to use as a Ustr string
 Type[1]: char[]

 Parameter[2]: Whether the fixed size Ustr should be limited
 Type[2]: int

 Parameter[3]: The initial length of the Ustr
 Type[3]: size_t

 Explanation:

  This calls ustr_init_fixed() with sizeof() the area of memory (Parameter[1])
 as the second argument.

 Note:

  This does mean that the first argument must be the correct size, as far as
 sizeof() is concerned, as in...

 char buf_sz[1024];
 Ustr *s1 = USTR_SC_INIT_AUTO(buf_sz, USTR_FALSE, 0);

 ...so passing pointers to memory from malloc() will probably just return NULL.


Section: Creating allocated Ustr functions

Function: ustr_init_alloc()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Pointer to area of memory to use as a Ustr string
 Type[1]: void *

 Parameter[2]: Size of area of memory
 Type[2]: size_t

 Parameter[3]: Whether Ustr should store the size
 Type[3]: size_t

 Parameter[4]: Number of bytes to use for references
 Type[4]: size_t

 Parameter[5]: Whether the Ustr should use exact allocations
 Type[5]: int

 Parameter[6]: Whether the Ustr should have the "enomem" flag set
 Type[6]: int

 Parameter[7]: The initial length of the Ustr
 Type[7]: size_t

 Explanation:

  This creates a new Ustr string, you should have allocated the data via. 
 USTR_CONF_MALLOC() or bad things will happen if the Ustr string is ever free'd
 or reallocated.


Function: ustr_dupx_empty()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Size of allocated storage
 Type[1]: size_t

 Parameter[2]: Number of bytes to use for reference count
 Type[2]: size_t

 Parameter[3]: Exact memory allocations
 Type[3]: int

 Parameter[4]: ENOMEM, memory error flag
 Type[4]: int

 Explanation:

  This function creates an empty Ustr, owned by you, that is allocated
 from system memory, or it returns NULL.
  The size is the desired allocation size for the entire Ustr, including
 overhead for metadata. This value will be rounded up, if it's too small, so
 passing 1 as the size says you want a stored size but to allocate the smallest
 amount of memory possible.

 Note:

  The reference byte count can only be one of the following values: 0, 1, 2 or
 4, or 8 (on environments with a 64bit size_t).
  It can be useful to ensure that the Ustr is in system memory, so that you can
 add things to it and check for errors with ustr_enomem().
  If you chose to store the allocated size in the Ustr then the number of bytes
 allocated for the reference count will be a minimum of 2.


Function: ustr_dup_empty()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Nothing
 Type[1]: void

 Explanation:

  This function is the same as calling ustr_dupx_empty() with the current set
 of default options.


Function: ustr_dupx_undef()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Size of allocated storage
 Type[1]: size_t

 Parameter[2]: Number of bytes to use for reference count
 Type[2]: size_t

 Parameter[3]: Exact memory allocations
 Type[3]: int

 Parameter[4]: ENOMEM, memory error flag
 Type[4]: int

 Parameter[5]: Length of new undefined data
 Type[5]: size_t

 Explanation:

  This function works like you called ustr_dupx_empty() and then
 ustr_add_undef().


Function: ustr_dup_undef()
 Returns: Ustr string
 Type: struct Ustr *

 Parameter[1]: Length of new undefined data
 Type[1]: size_t

 Explanation:

  This function is the same as calling ustr_dupx_undef() with the current set
 of default options.


Section: Adding data to a Ustr
Function: ustr_add_undef()
 Returns: Success or failure
 Type: int

 Parameter[1]: Pointer to a Ustr string
 Type[1]: struct Ustr **

 Parameter[2]: Length of new undefined data
 Type[2]: size_t

 Explanation:

  The Ustr string is expanded (possibly reallocated) so that it can contain
 length (Parameter[2]) extra data, if the length is not zero the Ustr will
 be writable. Or it'll return USTR_FALSE (zero) on failure.


Function: ustr_add_buf()
 Returns: Success or failure
 Type: int

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const void *
 Type[2]:  const void *

 Parameter[3]:  size_t
 Type[3]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_cstr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const struct Ustr *
 Type[2]:  const struct Ustr *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_subustr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const struct Ustr *
 Type[2]:  const struct Ustr *

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t
 Type[4]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_rep_chr()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  char
 Type[2]:  char

 Parameter[3]:  size_t
 Type[3]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Section: Deleting data from a Ustr
Function: ustr_del()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]: Length to delete.
 Type[2]: size_t

Explanation:

  This function deletes data from the end of Ustr, possibly re-sizing the Ustr
 at the same time.


Function: ustr_del_subustr()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **
 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  size_t
 Type[3]:  size_t

Explanation:

  This function works like ustr_del() but can delete an arbitrary section of the
 Ustr.


Section: Resizing a Ustr
Function: ustr_reallocx()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]: Exact size allocation
 Type[2]: int

Explanation:

  This function is re-sizes the Ustr if it is a sized Ustr (ustr_sized() returns
 USTR_TRUE). This is mostly used to shrink a Ustr that is now significantly
 smaller than it once was. Although this function will grow a Ustr under
 certain conditions.


Function: ustr_realloc()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

Explanation:

  This function is like ustr_reallocx() but uses the current value of
 ustr_exact().


Section: Adding formatted data to Ustr
Function: ustr_add_vfmt_lim()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  const char *
 Type[3]:  const char *

 Parameter[4]:  va_list
 Type[4]:  va_list

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_vfmt()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Parameter[3]:  va_list
 Type[3]:  va_list

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_fmt()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Parameter[3]:  ...
 Type[3]:  ...

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_fmt_lim()
 Returns: Success or failure
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]: const char *
 Type[3]: const char *

 Parameter[4]:  ...
 Type[4]:  ...

Explanation:

  This function is NOT DOCUMENTED YET!


Section: Adding binary data to Ustr functions
Function: ustr_add_b_uint16()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  uint_least16_t
 Type[2]:  uint_least16_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_b_uint32()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **
 Parameter[2]:  uint_least32_t
 Type[2]:  uint_least32_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_add_b_uint64()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  uint_least64_t
 Type[2]:  uint_least64_t

Explanation:

  This function is NOT DOCUMENTED YET!



Section: Parsing binary data from Ustr
Function: ustr_parse_b_uint16()
 Returns: uint_least16_t 
 Type: uint_least16_t 

 Parameter[1]: struct Ustr *
 Type[1]: struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_b_uint32()
 Returns: uint_least32_t 
 Type: uint_least32_t 

 Parameter[1]: struct Ustr *
 Type[1]: struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_b_uint64()
 Returns: uint_least64_t 
 Type: uint_least64_t 

 Parameter[1]: struct Ustr *
 Type[1]: struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Section: Ustr IO helpers
Function: ustr_io_get()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t *
 Type[4]:  size_t *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_getfile()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_getfilename()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_getline()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_put()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Parameter[3]:  size_t
 Type[3]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putline()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

 Parameter[3]:  size_t
 Type[3]:  size_t

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putfile()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putfileline()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  FILE *
 Type[2]:  FILE *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_io_putfilename()
 Returns: int 
 Type: int 

 Parameter[1]: struct Ustr **
 Type[1]: struct Ustr **

 Parameter[2]:  const char *
 Type[2]:  const char *

 Parameter[3]:  const char *
 Type[3]:  const char *

Explanation:

  This function is NOT DOCUMENTED YET!


Section: Dealing with UTF-8 in a Ustr
Function: ustr_utf8_valid()
 Returns: int 
 Type: int 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_len()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_width()
 Returns: ssize_t 
 Type: ssize_t 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_chars2bytes()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t *
 Type[4]:  size_t *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_utf8_bytes2chars()
 Returns: size_t 
 Type: size_t 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  size_t
 Type[2]:  size_t

 Parameter[3]:  size_t
 Type[3]:  size_t

 Parameter[4]:  size_t *
 Type[4]:  size_t *

Explanation:

  This function is NOT DOCUMENTED YET!


Section: Parsing integer numbers from a Ustr
Function: ustr_parse_uintmaxx()
 Returns: uintmax_t 
 Type: uintmax_t 

 Parameter[1]: Ustr
 Type[1]: const struct Ustr *

 Parameter[2]: flags
 Type[2]: unsigned int

 Parameter[3]: min
 Type[3]: uintmax_t

 Parameter[4]: max
 Type[4]:  uintmax_t

 Parameter[5]: seperator
 Type[5]:  char

 Parameter[6]: error number
 Type[6]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_ulongx()
 Returns: unsigned long 
 Type: unsigned long 

 Parameter[1]: Ustr
 Type[1]: const struct Ustr *

 Parameter[2]: flags
 Type[2]:  unsigned int

 Parameter[3]: min val
 Type[3]: unsigned long

 Parameter[4]: max val
 Type[4]:  unsigned long

 Parameter[5]: seperator
 Type[5]: const char *

 Parameter[6]: error number
 Type[6]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_uintmax()
 Returns: uintmax_t 
 Type: uintmax_t 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_intmax()
 Returns: intmax_t 
 Type: intmax_t 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_ulong()
 Returns: unsigned long 
 Type: unsigned long 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]: unsigned int *
 Type[3]: unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_long()
 Returns: long 
 Type: long 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_uint()
 Returns: unsigned int 
 Type: unsigned int 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_int()
 Returns: int 
 Type: int 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_ushort()
 Returns: unsigned short 
 Type: unsigned short 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]: unsigned int
 Type[2]: unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Function: ustr_parse_short()
 Returns: short 
 Type: short 

 Parameter[1]: const struct Ustr *
 Type[1]: const struct Ustr *

 Parameter[2]:  unsigned int
 Type[2]:  unsigned int

 Parameter[3]:  unsigned int *
 Type[3]:  unsigned int *

Explanation:

  This function is NOT DOCUMENTED YET!


Section: Simple Ustr pool API
Function: ustr_pool_make_pool()
 Returns: Ustr pool object
 Type: struct Ustr_pool *

 Parameter[1]: Nothing
 Type[1]: void

 Explanation:

  This allocates a new pool.

Function: ustr_pool_make_subpool()
 Returns: struct Ustr_pool *
 Type: struct Ustr_pool *

 Parameter[1]: struct Ustr_pool *
 Type[1]: struct Ustr_pool *

Explanation:

  This allocates a new pool as a child of the passed in pool (Parameter[1]),
 The pool can be freed and cleared independantly of the parent pool however
 free and clear operations on the parent pool are automatically applied to all
 child pools.


Function: ustr_pool_free()
 Returns: Nothing
 Type: void

 Parameter[1]: Ustr pool object
 Type[1]: struct Ustr_pool *

 Explanation:

  This deallocates a pool, and all sub-pools.

 Note:

  This also operates on all sub-pools.


Function: ustr_pool_clear()
 Returns: Nothing
 Type: void

 Parameter[1]: Ustr pool object
 Type[1]: struct Ustr_pool *

 Explanation:

  This allows all the data in the pool to be reused, it may also free some/all
 of the data in the pool, from the pool API.

 Note:

  This also operates on all sub-pools.

